/**
 * @file
 * @brief Vector data structure module definitions
 *
 * Copyright (C) 2018-2019 Jason Graham <jgraham@compukix.net>
 *
 * This file is part of libbds.
 *
 * libbds is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * libbds is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with libbds. If not, see
 * <https://www.gnu.org/licenses/>.
 */
#ifndef __BDS_VECTOR_H__
#define __BDS_VECTOR_H__

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Vector data structure
 */
struct bds_vector {
        size_t n_alloc;            ///< Number of elements allocated in the vector data vector
        size_t elem_len;           ///< Length in bytes of each data element
        size_t n_elem;             ///< Number of elements in the vector
        void *v;                   ///< Address of vector data vector
        void (*elem_dtor)(void *); ///< Destructor for each data element in data vector
};

/**
 * @brief Constructor for the vector data structure
 *
 * @param vector Address of the vector object
 * @param n_alloc Number of data elements to allocate
 * @param elem_len Length in bytes of each data element
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 */
void bds_vector_ctor(struct bds_vector *vector, size_t n_alloc, size_t elem_len, void (*elem_dtor)(void *));

/**
 * @brief Destructor for the vector data structure
 * @param vector Address of the vector object
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 */
void bds_vector_dtor(struct bds_vector *vector);

/**
 * @brief Allocator for the vector data structure
 *
 * @param n_alloc Number of data elements to allocate
 * @param elem_len Length in bytes of each data element
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 * @retval Address of vector object
 */
struct bds_vector *bds_vector_alloc(size_t n_alloc, size_t elem_len, void (*elem_dtor)(void *));

/**
 * @brief Frees the vector data structrue
 *
 * @param vector Address of vector object address (sets the vector object address to @c NULL)
 */
void bds_vector_free(struct bds_vector **vector);

/**
 * @brief Returns the address of the specified element
 *
 * @param vector Address of the vector object
 * @param i Index of the specified element
 * @retval Address of the element at index @c i
 */
static inline void *bds_vector_get(struct bds_vector *vector, size_t i)
{
        return (void *)((char *)vector->v + i * vector->elem_len);
}

/**
 * @brief Returns the address of the specified constant element
 *
 * @param vector Address of the vector object
 * @param i Index of the specified element
 * @retval Address of the element at index @c i
 */
static inline const void *bds_vector_get_const(const struct bds_vector *vector, size_t i)
{
        return (const void *)((const char *)vector->v + i * vector->elem_len);
}

/**
 * @brief Sets the value of the specified element
 *
 * @param vector Address of the vector object
 * @param i Index of the specified element
 * @param v Address of the value to be set
 */
static inline void bds_vector_set(struct bds_vector *vector, size_t i, const void *v)
{
        memcpy(bds_vector_get(vector, i), v, vector->elem_len);
}

/**
 * @brief Appends a data element onto the back of the vector
 *
 * @param vector Address of the vector object
 * @param v Address of the data element to be pushed onto the vector
 */
void bds_vector_append(struct bds_vector *vector, const void *v);

/**
 * @brief Provides the number of elements in the vector
 *
 * @param vector Address of vector object
 */
static inline size_t bds_vector_size(const struct bds_vector *vector) { return vector->n_elem; }

/**
 * @brief Gets the address of vector data vector
 *
 * @param vector Address of the vector object
 * @retval Address of the internal vector
 */
static inline void *bds_vector_ptr(struct bds_vector *vector) { return (void *)vector->v; }

/**
 * @brief Gets the address of vector constant data vector
 *
 * @param vector Address of the vector object
 * @retval Address of the internal vector
 */
static inline const void *bds_vector_ptr_const(const struct bds_vector *vector) { return (const void *)vector->v; }

/**
 * @brief Gets the end address of vector data vector
 *
 * The end element of the vector corresponds to element @c v[n_elem].
 *
 * @param vector Address of the vector object
 * @retval Address of the end address
 */
static inline const void *bds_vector_end(const struct bds_vector *vector)
{
        return (const void *)((char *)bds_vector_ptr_const(vector) + bds_vector_size(vector));
}

/**
 * @brief Tests if the vector is empty
 *
 * @param vector Address of the vector object
 * @retval Returns true if the vector is empty; false otherwise
 */
static inline bool bds_vector_isempty(const struct bds_vector *vector) { return (vector->n_elem == 0); }

/**
 * @brief Tests if the vector is full
 *
 * @param vector Address of the vector object
 * @retval Returns true if the vector is full; false otherwise
 */
static inline bool bds_vector_isfull(const struct bds_vector *vector)
{
        return (vector->n_elem == vector->n_alloc);
}

/**
 * @brief Clears the vector (does not deallocate memory)
 *
 * @param vector Address of the vector object
 */
void bds_vector_clear(struct bds_vector *vector);

/**
 * @brief Peforms a linear search for a data element
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
void *bds_vector_lsearch(struct bds_vector *vector, const void *key, int (*compar)(const void *, const void *));

/**
 * @brief Peforms a linear search for a constant data element
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
const void *bds_vector_lsearch_const(const struct bds_vector *vector, const void *key,
                                     int (*compar)(const void *, const void *));

/**
 * @brief Peforms a binary search for a data element using bsearch
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
void *bds_vector_bsearch(struct bds_vector *vector, const void *key, int (*compar)(const void *a, const void *b));

/**
 * @brief Peforms a binary search for a constant data element using bsearch
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
const void *bds_vector_bsearch_const(const struct bds_vector *vector, const void *key,
                                     int (*compar)(const void *a, const void *b));

/* /\** */
/*  * @brief Modifies a vector data element */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @param key Address of the key object */
/*  * @param v Address of new object (copied to element matching @c key) */
/*  * @param compar Address of the comparator function */
/*  *\/ */
/* const void *bds_vector_modify(struct bds_vector *vector, const void *key, const void *v, */
/*                              int (*compar)(const void *, const void *)); */

/**
 * @brief Sorts all elements in the vector using qsort
 *
 * @param vector Address of the vector object
 * @param compar Address of the comparator function
 */
void bds_vector_qsort(struct bds_vector *vector, int (*compar)(const void *, const void *));

#ifdef BDS_NAMESPACE
typedef struct bds_vector vector_t;
#define vector_ctor bds_vector_ctor
#define vector_dtor bds_vector_dtor
#define vector_get bds_vector_get
#define vector_get_const bds_vector_get_const
#define vector_set bds_vector_set
#define vector_append bds_vector_append
#define vector_size bds_vector_size
#define vector_ptr bds_vector_ptr
#define vector_ptr_const bds_vector_ptr_const
#define vector_isempty bds_vector_isempty
#define vector_isfull bds_vector_isfull
#define vector_clear bds_vector_clear
#define vector_lsearch bds_vector_lsearch
#define vector_lsearch_const bds_vector_lsearch_const
#define vector_bsearch bds_vector_bsearch
#define vector_bsearch_const bds_vector_bsearch_const
//#define vector_modify bds_vector_modify
#define vector_qsort bds_vector_qsort
#endif

#ifdef __cplusplus
}
#endif

#endif // __BDS_VECTOR_H__
