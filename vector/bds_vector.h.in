/** @file
 *  @brief Vector data structure module definitions
 *
 *  @author Jason Graham <jgraha8@gmail.com>
 */

#ifndef __BDS_VECTOR_H__
#define __BDS_VECTOR_H__

#include <stdbool.h>
#include <stdlib.h>
#include <sys/types.h>
#include <string.h>

#include <@BDS_HEADER_PREFIX@/bds_stack.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Vector data structure
 */
struct bds_vector {
        struct bds_stack __object;
};

/**
 * @brief Constructor for the vector data structure
 *
 * @param vector Address of the vector object
 * @param n_alloc Number of data elements to allocate
 * @param elem_len Length in bytes of each data element
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 */
void bds_vector_ctor(struct bds_vector *vector, size_t n_alloc, size_t elem_len, void (*elem_dtor)(void *));

/**
 * @brief Destructor for the vector data structure
 * @param vector Address of the vector object
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 */
void bds_vector_dtor(struct bds_vector *vector);

/**
 * @brief Allocator for the vector data structure
 *
 * @param n_alloc Number of data elements to allocate
 * @param elem_len Length in bytes of each data element
 * @param elem_dtor Destructor for each data element (disabled if NULL)
 * @retval Address of vector object
 */
struct bds_vector *bds_vector_alloc(size_t n_alloc, size_t elem_len, void (*elem_dtor)(void *));

/**
 * @brief Frees the vector data structrue
 *
 * @param vector Address of vector object address (sets the vector object address to @c NULL)
 */
void bds_vector_free(struct bds_vector **vector);

/**
 * @brief Returns the address of the specified element
 *
 * @param vector Address of the vector object
 * @param i Index of the specified element
 * @retval Address of the element at index @c i
 */
static inline void *bds_vector_get(struct bds_vector *vector, size_t i)
{
        return (void *)((char *)vector->__object.v + i * vector->__object.elem_len);
}

/**
 * @brief Sets the value of the specified element
 *
 * @param vector Address of the vector object
 * @param i Index of the specified element
 * @param v Address of the value to be set
 */
static inline void bds_vector_set(struct bds_vector *vector, size_t i, const void *v)
{
	memcpy(bds_vector_get(vector,i), v, vector->__object.elem_len);
}

/**
 * @brief Appends a data element onto the back of the vector
 *
 * @param vector Address of the vector object
 * @param v Address of the data element to be pushed onto the vector
 */
void bds_vector_append(struct bds_vector *vector, const void *v);

/* /\** */
/*  * @brief Pushes a data element onto the back of the vector */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @param v Address of the data element to be pushed onto the vector */
/*  *\/ */
/* void bds_vector_push(struct bds_vector *vector, const void *v); */

/* /\** */
/*  * @brief Pops a data element off of the vector */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @param v Address of a buffer to copy the popped data element (if @c NULL then the element is not copied) */
/*  * @retval Address of the internal vector vector of popped data element (returns @c NULL if the vector is empty)
 */
/*  *\/ */
/* void *bds_vector_pop(struct bds_vector *vector, void *v); */

/**
 * @brief Provides the number of elements in the vector
 *
 * @param vector Address of vector object
 */
static inline size_t bds_vector_size(const struct bds_vector *vector)
{
        return bds_stack_size((const struct bds_stack *)vector);
}

/* /\** */
/*  * @brief Gets the index of the top of the vector (index of last pushed element) */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @retval Index of top element in the vector (returns -1 if the vector is empty) */
/*  *\/ */
/* static inline ssize_t bds_vector_top(const struct bds_vector *vector) { return ((ssize_t)vector->n_elem - 1); }
 */

/* /\** */
/*  * @brief Gets the address of top data element */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @retval Address of the internal vector vector of the top data element (returns @c NULL if the vector is
 * empty) */
/*  *\/ */
/* const void *bds_vector_topptr(const struct bds_vector *vector); */

/**
 * @brief Gets the address of vector data vector
 *
 * @param vector Address of the vector object
 * @retval Address of the internal vector vector
 */
static inline const void *bds_vector_ptr(const struct bds_vector *vector)
{
        return bds_stack_ptr((const struct bds_stack *)vector);
}

/**
 * @brief Tests if the vector is empty
 *
 * @param vector Address of the vector object
 * @retval Returns true if the vector is empty; false otherwise
 */
static inline bool bds_vector_isempty(const struct bds_vector *vector)
{
        return bds_stack_isempty((const struct bds_stack *)vector);
}

/**
 * @brief Tests if the vector is full
 *
 * @param vector Address of the vector object
 * @retval Returns true if the vector is full; false otherwise
 */
static inline bool bds_vector_isfull(const struct bds_vector *vector)
{
        return bds_stack_isfull((const struct bds_stack *)vector);
}

/**
 * @brief Clears the vector (does not deallocate memory)
 *
 * @param vector Address of the vector object
 */
void bds_vector_clear(struct bds_vector *vector);

/**
 * @brief Peforms a linear search for a data element
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
const void *bds_vector_lsearch(const struct bds_vector *vector, const void *key,
                               int (*compar)(const void *, const void *));

/**
 * @brief Peforms a binary search for a data element using bsearch
 *
 * @param vector Address of the vector object
 * @param key Address of the key object
 * @param compar Address of the comparator function
 */
const void *bds_vector_bsearch(const struct bds_vector *vector, const void *key,
                               int (*compar)(const void *a, const void *b));

/* /\** */
/*  * @brief Modifies a vector data element */
/*  * */
/*  * @param vector Address of the vector object */
/*  * @param key Address of the key object */
/*  * @param v Address of new object (copied to element matching @c key) */
/*  * @param compar Address of the comparator function */
/*  *\/ */
/* const void *bds_vector_modify(struct bds_vector *vector, const void *key, const void *v, */
/*                              int (*compar)(const void *, const void *)); */

/**
 * @brief Sorts all elements in the vector using qsort
 *
 * @param vector Address of the vector object
 * @param compar Address of the comparator function
 */
void bds_vector_qsort(struct bds_vector *vector, int (*compar)(const void *, const void *));

#ifdef BDS_NAMESPACE
typedef struct bds_vector vector_t;
#define vector_ctor bds_vector_ctor
#define vector_dtor bds_vector_dtor
#define vector_get bds_vector_get
#define vector_set bds_vector_set
#define vector_append bds_vector_append	
#define vector_size bds_vector_size
//#define vector_top bds_vector_top
//#define vector_topptr bds_vector_topptr
#define vector_ptr bds_vector_ptr
#define vector_isempty bds_vector_isempty
#define vector_isfull bds_vector_isfull
#define vector_clear bds_vector_clear
#define vector_lsearch bds_vector_lsearch
#define vector_bsearch bds_vector_bsearch
//#define vector_modify bds_vector_modify
#define vector_qsort bds_vector_qsort
#endif

#ifdef __cplusplus
}
#endif

#endif // __BDS_VECTOR_H__
